package com.hcl.msastudio.controller;


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.hcl.msastudio.domain.ProjectDTO;
import com.hcl.msastudio.service.MSADataModelReportService;
import com.hcl.msastudio.service.MSAMasterReportService;
import com.hcl.msastudio.service.MSAVulnerabilityAnalyseService;

@RestController
public class MSAVulnerabilityAnalyseReportController {

	private static final Logger logger = LoggerFactory.getLogger(MSAVulnerabilityAnalyseReportController.class);
	
	@Autowired
	MSAMasterReportService masterReportService;
	
	@Autowired
	MSAVulnerabilityAnalyseService vulnerabilityAnalyseService;

	@GetMapping(value = "/vulnerability")
	public ModelAndView getAllProjects(@ModelAttribute("ProjectDTO") ProjectDTO user,
		      BindingResult result, Model model) throws Exception {

		ModelAndView modelAndView = new ModelAndView("vulnerability");
		//modelAndView.setViewName(request.getServletPath().substring(1));
		modelAndView.addObject("projects", masterReportService.getAllProjects());

		return modelAndView;
	}

	@GetMapping(value = "/vulnerability/{projectId}")
	public ModelAndView getAllJobs(HttpServletRequest request, @PathVariable String projectId) throws Exception {

		ModelAndView modelAndView = new ModelAndView("vulnerability");
		modelAndView.addObject("jobs", masterReportService.getAllJobs(projectId));

		return modelAndView;
	}

	@PostMapping(value = "/vulnerabilityreport")
	public ModelAndView getSessionDetailsAnalysis(@RequestParam String projectId) {
		System.out.println("Project ID for which Vulnerability report is being pulled:"+projectId);
		ModelMap model = new ModelMap();
		if(null != projectId && !projectId.isEmpty()) {
			String[] projectInfo = projectId.split(":");
			model.addAttribute("reports",vulnerabilityAnalyseService.getVulnerabilityAnalysisReport(projectInfo[0]));
			model.addAttribute("technology",projectInfo[1]);
		}
		return new ModelAndView("vulnerabilityreport", model);
	}
}
